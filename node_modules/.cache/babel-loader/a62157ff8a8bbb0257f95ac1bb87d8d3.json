{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport { useSpring } from \"react-spring\";\nimport { usePrefersReducedMotion } from \"./prefers-reduced-motion\";\n// Heavily inspired by Josh Comeau: https://www.joshwcomeau.com/react/boop/ ðŸ’–\n\n// Wiggle function accepts various parameters specifying properties for the animation\nexport function useWiggle(_ref) {\n  _s();\n  let {\n    x = 0,\n    y = 0,\n    rotation = 0,\n    scale = 1,\n    timing = 150,\n    springConfig = {\n      tension: 300,\n      friction: 10\n    }\n  } = _ref;\n  // Accessibility setting from the user system indicating that they prefer to minimize motion\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  // Declare state variable isActive, set initially to false\n  const [isActive, setIsActive] = useState(false);\n\n  // We offload the actual animation to spring: https://www.react-spring.io/docs/hooks/use-spring\n  const style = useSpring({\n    transform: isActive ? `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${scale})` : `translate(0px, 0px) rotate(0deg) scale(1)`,\n    config: springConfig\n  });\n\n  // Timing parameter determines how long the wiggle lasts using browser setTimeout function\n  // React useEffect function https://reactjs.org/docs/hooks-effect.html\n  React.useEffect(() => {\n    if (!isActive) {\n      return;\n    }\n    const timeoutId = window.setTimeout(() => {\n      setIsActive(false);\n    }, timing);\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isActive]); // Continue wiggle until isActive is set false when timeout elapses\n\n  // Set wiggle to active when the triggering event occurs - will be set false when effect completes above\n  const trigger = useCallback(() => {\n    setIsActive(true);\n  }, []);\n  let appliedStyle = prefersReducedMotion ? {} : style;\n\n  // Return animation style effect and function to apply on trigger in page\n  return [appliedStyle, trigger];\n}\n_s(useWiggle, \"RG3iRAlAZJTme4qa9V+bMhHCNDo=\", false, function () {\n  return [usePrefersReducedMotion, useSpring];\n});","map":{"version":3,"names":["React","useState","useCallback","useSpring","usePrefersReducedMotion","useWiggle","x","y","rotation","scale","timing","springConfig","tension","friction","prefersReducedMotion","isActive","setIsActive","style","transform","config","useEffect","timeoutId","window","setTimeout","clearTimeout","trigger","appliedStyle"],"sources":["D:/Breadsticks/breadsticks-site/src/hooks/wiggle.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { useSpring } from \"react-spring\";\r\nimport { usePrefersReducedMotion } from \"./prefers-reduced-motion\";\r\n// Heavily inspired by Josh Comeau: https://www.joshwcomeau.com/react/boop/ ðŸ’–\r\n\r\n// Wiggle function accepts various parameters specifying properties for the animation\r\nexport function useWiggle({\r\n  x = 0,\r\n  y = 0,\r\n  rotation = 0,\r\n  scale = 1,\r\n  timing = 150,\r\n  springConfig = {\r\n    tension: 300,\r\n    friction: 10\r\n  }\r\n}) {\r\n  // Accessibility setting from the user system indicating that they prefer to minimize motion\r\n  const prefersReducedMotion = usePrefersReducedMotion();\r\n\r\n  // Declare state variable isActive, set initially to false\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  // We offload the actual animation to spring: https://www.react-spring.io/docs/hooks/use-spring\r\n  const style = useSpring({\r\n    transform: isActive\r\n      ? `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${scale})`\r\n      : `translate(0px, 0px) rotate(0deg) scale(1)`,\r\n    config: springConfig\r\n  });\r\n\r\n  // Timing parameter determines how long the wiggle lasts using browser setTimeout function\r\n  // React useEffect function https://reactjs.org/docs/hooks-effect.html\r\n  React.useEffect(() => {\r\n    if (!isActive) {\r\n      return;\r\n    }\r\n    const timeoutId = window.setTimeout(() => {\r\n      setIsActive(false);\r\n    }, timing);\r\n    return () => {\r\n      window.clearTimeout(timeoutId);\r\n    };\r\n  }, [isActive]); // Continue wiggle until isActive is set false when timeout elapses\r\n\r\n  // Set wiggle to active when the triggering event occurs - will be set false when effect completes above\r\n  const trigger = useCallback(() => {\r\n    setIsActive(true);\r\n  }, []);\r\n\r\n  let appliedStyle = prefersReducedMotion ? {} : style;\r\n\r\n  // Return animation style effect and function to apply on trigger in page\r\n  return [appliedStyle, trigger];\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,uBAAuB,QAAQ,0BAA0B;AAClE;;AAEA;AACA,OAAO,SAASC,SAAS,OAUtB;EAAA;EAAA,IAVuB;IACxBC,CAAC,GAAG,CAAC;IACLC,CAAC,GAAG,CAAC;IACLC,QAAQ,GAAG,CAAC;IACZC,KAAK,GAAG,CAAC;IACTC,MAAM,GAAG,GAAG;IACZC,YAAY,GAAG;MACbC,OAAO,EAAE,GAAG;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACC;EACA,MAAMC,oBAAoB,GAAGV,uBAAuB,EAAE;;EAEtD;EACA,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMgB,KAAK,GAAGd,SAAS,CAAC;IACtBe,SAAS,EAAEH,QAAQ,GACd,aAAYT,CAAE,OAAMC,CAAE,cAAaC,QAAS,cAAaC,KAAM,GAAE,GACjE,2CAA0C;IAC/CU,MAAM,EAAER;EACV,CAAC,CAAC;;EAEF;EACA;EACAX,KAAK,CAACoB,SAAS,CAAC,MAAM;IACpB,IAAI,CAACL,QAAQ,EAAE;MACb;IACF;IACA,MAAMM,SAAS,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAM;MACxCP,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,EAAEN,MAAM,CAAC;IACV,OAAO,MAAM;MACXY,MAAM,CAACE,YAAY,CAACH,SAAS,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAMU,OAAO,GAAGvB,WAAW,CAAC,MAAM;IAChCc,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIU,YAAY,GAAGZ,oBAAoB,GAAG,CAAC,CAAC,GAAGG,KAAK;;EAEpD;EACA,OAAO,CAACS,YAAY,EAAED,OAAO,CAAC;AAChC;AAAC,GAhDepB,SAAS;EAAA,QAYMD,uBAAuB,EAMtCD,SAAS;AAAA"},"metadata":{},"sourceType":"module"}